/*
 * Copyright 2017 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.guvnor.ala.ui.backend.service.pipeline;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.enterprise.context.ApplicationScoped;

import org.guvnor.ala.runtime.RuntimeId;

@ApplicationScoped
public class PipelineExecutionRegistry {

    private List<PipelineExecutionRecord> records = new ArrayList<>();

    public PipelineExecutionRegistry() {
        //Empty constructor for Weld proxying
    }

    public void register(PipelineExecutionRecord record) {
        records.add(record);
    }

    /**
     * @return the PipelineExecutionRecord with the information of the pipeline execution that generated the given
     * runtime. If the runtime wasn't generated by a pipeline, or the PipelineExecutionRecord was not found returns null.
     */
    public PipelineExecutionRecord getExecutionRecord(RuntimeId runtimeId) {
        return records.stream().
                filter( record -> runtimeId.equals(record.getTask().getRuntimeId()))
                .findFirst()
                .orElse(null);
    }

    public Collection<PipelineExecutionRecord> getExecutionRecords() {
        return records;
    }


}